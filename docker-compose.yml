version: '3.8'

services:
  # ============================================
  # BASE DE DATOS - PostgreSQL
  # ============================================
  postgres:
    image: postgres:15-alpine
    container_name: restaurant_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-restaurant_db}
      POSTGRES_USER: ${POSTGRES_USER:-admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-admin123}
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - restaurant_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d restaurant_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ============================================
  # REDIS (Cache & Message Queue)
  # ============================================
  redis:
    image: redis:7-alpine
    container_name: restaurant_redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - restaurant_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ============================================
  # MONGODB (Opcional - Logs & Analytics)
  # ============================================
  mongodb:
    image: mongo:7
    container_name: restaurant_mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USER:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD:-admin123}
      MONGO_INITDB_DATABASE: restaurant_logs
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - restaurant_network
    profiles:
      - full  # Solo se inicia si se especifica: docker-compose --profile full up

  # ============================================
  # BACKEND API
  # ============================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: restaurant_backend
    restart: unless-stopped
    env_file:
      - .env
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      POSTGRES_HOST: postgres
      REDIS_HOST: redis
    ports:
      - "${PORT:-4000}:4000"
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - restaurant_network
    command: npm run start:dev

  # ============================================
  # FRONTEND - Web Admin Panel
  # ============================================
  web-admin:
    build:
      context: ./frontend/web-admin
      dockerfile: Dockerfile
      target: development
    container_name: restaurant_web_admin
    restart: unless-stopped
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:4000/api/v1
      NEXT_PUBLIC_WS_URL: ws://localhost:4000
    ports:
      - "3000:3000"
    volumes:
      - ./frontend/web-admin:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    networks:
      - restaurant_network
    command: npm run dev

  # ============================================
  # KDS - Kitchen Display System
  # ============================================
  kds:
    build:
      context: ./frontend/kds
      dockerfile: Dockerfile
      target: development
    container_name: restaurant_kds
    restart: unless-stopped
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:4000/api/v1
      NEXT_PUBLIC_WS_URL: ws://localhost:4000
    ports:
      - "3001:3001"
    volumes:
      - ./frontend/kds:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    networks:
      - restaurant_network
    command: npm run dev

  # ============================================
  # POS - Point of Sale
  # ============================================
  pos:
    build:
      context: ./frontend/pos
      dockerfile: Dockerfile
      target: development
    container_name: restaurant_pos
    restart: unless-stopped
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:4000/api/v1
      NEXT_PUBLIC_WS_URL: ws://localhost:4000
    ports:
      - "3002:3002"
    volumes:
      - ./frontend/pos:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    networks:
      - restaurant_network
    command: npm run dev
    profiles:
      - full

  # ============================================
  # NGINX (Reverse Proxy)
  # ============================================
  nginx:
    image: nginx:alpine
    container_name: restaurant_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infrastructure/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./certs:/etc/nginx/certs:ro
    depends_on:
      - backend
      - web-admin
      - kds
    networks:
      - restaurant_network
    profiles:
      - production

  # ============================================
  # PGADMIN (Administración de PostgreSQL)
  # ============================================
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: restaurant_pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@restaurant.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - restaurant_network
    profiles:
      - dev-tools

  # ============================================
  # REDIS COMMANDER (Administración de Redis)
  # ============================================
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: restaurant_redis_commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - restaurant_network
    profiles:
      - dev-tools

  # ============================================
  # MAILHOG (Email Testing)
  # ============================================
  mailhog:
    image: mailhog/mailhog:latest
    container_name: restaurant_mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - restaurant_network
    profiles:
      - dev-tools

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  mongodb_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  restaurant_network:
    driver: bridge
